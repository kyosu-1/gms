openapi: 3.0.0
info:
  title: Item Management API
  version: 1.0.0
servers:
  - url: https://localhost:8080/api
    description: Local server
paths:
  /signin:
    post:
      summary: User sign in
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      security: []
      responses:
        204:
          description: CookieにSESSION_IDを入れて返す
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSION_ID=abcde12345;
        401:
          description: Unauthorized
  /signout:
    post:
      summary: User sign out
      tags: [User]
      security:
        - SessionAuth: []
      responses:
        204:
          description: CookieのSESSION_IDを削除する
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSION_ID=; Max-Age=0;
        401:
          description: Unauthorized
  /me:
    get:
      summary: Get logged in user's information
      tags: [User]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

  /categories:
    get:
      summary: Get all categories
      tags: [category]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        401:
          description: Unauthorized
    post:
      summary: Create or update a category
      tags: [category]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request
        401:
          description: Unauthorized
  
  /categories/{categoryID}:
    parameters:
      - $ref: '#/components/parameters/categoryID'
    get:
      summary: Get a category
      tags: [category]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete a category
      tags: [category]
      security:
        - SessionAuth: []
      responses:
        204:
          description: No Content
        401:
          description: Unauthorized
  /items:
    get:
      summary: Get all items
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        401:
          description: Unauthorized
    post:
      summary: Create or update an item
      tags: [item]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPostBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Bad request
        401:
          description: Unauthorized

  /items/{itemID}:
    parameters:
      - $ref: '#/components/parameters/itemID'
    get:
      summary: Get an item
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete an item
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        204:
          description: No Content
        401:
          description: Unauthorized

  /items/{itemID}/itemUses:
    get:
      summary: Get all uses of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    post:
      summary: Create or update a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUse'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemUse'
        400:
          description: Bad request
        401:
          description: Unauthorized

  /items/{itemID}/itemUses/{itemUseID}:
    parameters:
      - $ref: '#/components/parameters/itemUseID'
    get:
      summary: Get a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemUse'
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        204:
          description: No Content
        401:
          description: Unauthorized

components:
  securitySchemes:
    SessionAuth:
      description: Session Auth
      type: apiKey
      in: cookie
      name: SESSION_ID
  parameters:
    categoryID:
      name: categoryID
      in: path
      description: ID of the item type
      required: true
      schema:
        type: integer
    itemID:
      name: itemID
      in: path
      description: ID of the item
      required: true
      schema:
        type: integer
    itemUseID:
      name: itemUseID
      in: path
      description: ID of the item use
      required: true
      schema:
        type: integer
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'
  schemas:
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
    BadRequestError:
      type: object
      properties:
        error:
          type: string
    UserSignin:
      type: object
      properties:
        id:
          type: string
        password:
          type: string
      required:
        - id
        - password
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    Category:
      type: object
      properties:
        id:
          type: integer
        categoryName:
          type: string
      required:
        - id
        - categoryName
    ItemPostBody:
      type: object
      properties:
        id:
          type: integer
        categoryIDs:
          type: array
          items:
            type: integer
        itemName:
          type: string
        description:
          type: string
        acquisitionDate:
          type: string
          format: date
        location:
          type: string
      required:
        - id
        - categoryIDs
        - itemName
        - detail
        - acquisitionDate
        - location
    Item:
      type: object
      properties:
        id:
          type: integer
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        itemName:
          type: string
        description:
          type: string
        acquisitionDate:
          type: string
          format: date
        location:
          type: string
      required:
        - id
        - categories
        - itemName
        - detail
        - acquisitionDate
        - location
    ItemUse:
      type: object
      properties:
        id:
          type: integer
        userID:
          type: string
        itemID:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      required:
        - id
        - userID
        - itemID
        - startDate