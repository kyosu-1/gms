openapi: 3.0.0
info:
  title: Item Management API
  version: 1.0.0
servers:
  - url: https://example.com/api/v1
paths:
  /signup:
    post:
      summary: User sign up
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        201:
          description: Created
        400:
          description: Bad request

  /signin:
    post:
      summary: User sign in
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      responses:
        200:
          description: OK
        401:
          description: Unauthorized

  /me:
    get:
      summary: Get logged in user's information
      tags: [User]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
  /groups:
    get:
      summary: Get all groups for logged in user
      tags: [Group]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    post:
      summary: Create a new group
      tags: [Group]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized

  /groups/{groupID}:
    get:
      summary: Get a group
      tags: [Group]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
    put:
      summary: Update a group
      tags: [Group]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete a group
      tags: [Group]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
  /groups/{groupID}/itemTypes:
    get:
      summary: Get all item types in a group
      tags: [itemType]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    post:
      summary: Create a new item type in a group
      tags: [itemType]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemType'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized
  
  /groups/{groupID}/itemTypes/{itemTypeID}:
    get:
      summary: Get a item type
      tags: [itemType]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
    put:
      summary: Update a item type
      tags: [itemType]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemType'
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete a item type
      tags: [itemType]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
  /groups/{groupID}/items:
    get:
      summary: Get all items in a group
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    post:
      summary: Create a new item in a group
      tags: [item]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized

  /groups/{groupID}/items/{itemID}:
    get:
      summary: Get an item
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
    put:
      summary: Update an item
      tags: [item]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete an item
      tags: [item]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found

  /items/{itemID}/itemUses:
    get:
      summary: Get all uses of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
    post:
      summary: Create a new use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUse'
      responses:
        201:
          description: Created
        400:
          description: Bad request
        401:
          description: Unauthorized

  /items/{itemID}/itemUses/{itemUseID}:
    get:
      summary: Get a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found
    put:
      summary: Update a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUse'
      responses:
        200:
          description: OK
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: Delete a use of an item
      tags: [itemUse]
      security:
        - SessionAuth: []
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: Not Found

components:
  securitySchemes:
    SessionAuth:
      type: apiKey
      in: header
      name: X-Session-Token
  schemas:
    UserSignup:
      type: object
      properties:
        ID:
          type: string
        Name:
          type: string
        Password:
          type: string
    UserSignin:
      type: object
      properties:
        ID:
          type: string
        Password:
          type: string
    Group:
      type: object
      properties:
        ID:
          type: string
        GroupName:
          type: string
    ItemType:
      type: object
      properties:
        ID:
          type: integer
        GroupID:
          type: string
        ItemTypeName:
          type: string
    Item:
      type: object
      properties:
        ID:
          type: integer
        GroupID:
          type: string
        ItemTypeID:
          type: integer
        ItemName:
          type: string
        Details:
          type: string
        AcquisitionDate:
          type: string
          format: date
        Location:
          type: string

    ItemUse:
      type: object
      properties:
        ID:
          type: string
        UserID:
          type: string
        AcquisitionDate:
          type: string
          format: date
        ReturnDate:
          type: string
          format: date